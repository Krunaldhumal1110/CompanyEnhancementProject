{"ast":null,"code":"var _jsxFileName = \"D:\\\\Krunal\\\\catalisProject\\\\frontend\\\\src\\\\MachineGrid.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef } from 'react';\nimport { Grid, Card, CardContent, Typography, Button, Dialog, DialogTitle, DialogContent, DialogActions, TextField, Snackbar } from '@mui/material';\nimport { useNavigate } from 'react-router-dom';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst BLOCKS = 12;\n\n// API calls\nconst addMachineApi = async formData => {\n  const {\n    data\n  } = await axios.post('/api/machines', formData);\n  return data;\n};\nconst fetchMachines = async () => {\n  const {\n    data\n  } = await axios.get('/api/machines');\n  return data;\n};\nconst completeMachineApi = async id => {\n  const {\n    data\n  } = await axios.post(`/api/machines/${id}/complete`);\n  return data;\n};\nconst deleteMachineApi = async id => {\n  await axios.delete(`/api/machines/${id}`);\n};\nfunction MachineGrid() {\n  _s();\n  const navigate = useNavigate();\n  const queryClient = useQueryClient();\n  const [pdfFile, setPdfFile] = useState(null);\n  const fileInputRef = useRef();\n\n  // âœ… React Query: fetch machines directly\n  const {\n    data: machines = []\n  } = useQuery({\n    queryKey: ['machines'],\n    queryFn: fetchMachines,\n    staleTime: 5 * 60 * 1000,\n    // keep cached for 5 minutes\n    select: data => Array.isArray(data) ? data.sort((a, b) => (a.blockNo || 0) - (b.blockNo || 0)) : [],\n    refetchOnWindowFocus: false\n  });\n\n  // Mutations\n  const addMachineMutation = useMutation({\n    mutationFn: addMachineApi,\n    onSuccess: () => {\n      queryClient.invalidateQueries({\n        queryKey: ['machines']\n      });\n    }\n  });\n  const completeMachineMutation = useMutation({\n    mutationFn: completeMachineApi,\n    onSuccess: () => queryClient.invalidateQueries({\n      queryKey: ['machines']\n    })\n  });\n  const deleteMachineMutation = useMutation({\n    mutationFn: deleteMachineApi,\n    onSuccess: () => queryClient.invalidateQueries({\n      queryKey: ['machines']\n    })\n  });\n\n  // UI state\n  const [open, setOpen] = useState(false);\n  const [selectedBlock, setSelectedBlock] = useState(null);\n  const MACHINE_MODELS = ['CPT425-SERRA', 'CPT525-SERRA', 'CPT625-SERRA', 'CPT650-SERRA', 'CPT825-SERRA'];\n  const [form, setForm] = useState({\n    model: '',\n    productNo: ''\n  });\n  const [snackbar, setSnackbar] = useState({\n    open: false,\n    message: '',\n    action: null\n  });\n\n  // Always 12 blocks, fill with machines or empty\n  const blocks = Array.from({\n    length: BLOCKS\n  }, (_, i) => {\n    const machine = machines.find(m => m.blockNo === i + 1);\n    return machine ? {\n      ...machine,\n      block: i + 1\n    } : {\n      block: i + 1\n    };\n  });\n\n  // Handlers\n  const handleAddClick = blockIdx => {\n    const blockMachine = machines.find(m => m.blockNo === blockIdx + 1);\n    if (blockMachine) {\n      setSnackbar({\n        open: true,\n        message: 'This block already has a machine. Please select an empty block.',\n        action: null\n      });\n      return;\n    }\n    setSelectedBlock(blockIdx);\n    setForm({\n      model: '',\n      productNo: ''\n    });\n    setOpen(true);\n    setPdfFile(null);\n  };\n  const handleAddMachine = async () => {\n    if (!form.model || !/^\\d{7}$/.test(form.productNo)) {\n      setSnackbar({\n        open: true,\n        message: 'Enter model and unique 7-digit machine no.',\n        action: null\n      });\n      return;\n    }\n    if (!pdfFile) {\n      setSnackbar({\n        open: true,\n        message: 'Please upload a master order PDF.',\n        action: null\n      });\n      return;\n    }\n    const exists = machines.some(m => m.productNo === form.productNo);\n    if (exists) {\n      setSnackbar({\n        open: true,\n        message: 'Machine no. must be unique!',\n        action: null\n      });\n      return;\n    }\n    const formData = new FormData();\n    formData.append('name', `M/C-${selectedBlock + 1}`);\n    formData.append('status', 'INCOMPLETE');\n    formData.append('completed', false);\n    formData.append('masterCardInfo', '');\n    formData.append('electricDrawingPath', '');\n    formData.append('machineNo', String(selectedBlock + 1));\n    formData.append('model', form.model);\n    formData.append('productNo', form.productNo);\n    formData.append('blockNo', selectedBlock + 1);\n    formData.append('pdf', pdfFile);\n    try {\n      await addMachineMutation.mutateAsync(formData);\n      setOpen(false);\n      setSelectedBlock(null);\n      setPdfFile(null);\n    } catch (err) {\n      var _err$response;\n      let msg = 'Upload failed';\n      if (err !== null && err !== void 0 && (_err$response = err.response) !== null && _err$response !== void 0 && _err$response.data) {\n        if (typeof err.response.data === 'string') {\n          msg = err.response.data;\n        } else if (typeof err.response.data === 'object' && err.response.data.message) {\n          msg = err.response.data.message;\n        }\n      }\n      setSnackbar({\n        open: true,\n        message: msg,\n        action: null\n      });\n    }\n  };\n  const markComplete = async machine => {\n    await completeMachineMutation.mutateAsync(machine.id);\n    setSnackbar({\n      open: true,\n      message: 'Would you like to remove this machine from shopfloor?',\n      action: /*#__PURE__*/_jsxDEV(Button, {\n        color: \"inherit\",\n        size: \"small\",\n        onClick: () => removeMachine(machine.id),\n        children: \"Yes, Remove\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }, this)\n    });\n  };\n  const removeMachine = async id => {\n    await deleteMachineMutation.mutateAsync(id);\n    setSnackbar({\n      open: true,\n      message: 'Machine removed from shopfloor and added to completed table.',\n      action: null\n    });\n  };\n\n  // UI\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 2,\n      sx: {\n        mt: 2,\n        background: '#fff',\n        minHeight: '80vh',\n        p: 2\n      },\n      children: blocks.map((m, idx) => /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 6,\n        sm: 4,\n        md: 3,\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          sx: {\n            background: m.completed ? '#c8e6c9' : m.status === 'INCOMPLETE' ? '#ffcdd2' : '#fff',\n            minHeight: 120\n          },\n          children: /*#__PURE__*/_jsxDEV(CardContent, {\n            sx: {\n              textAlign: 'center'\n            },\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"h6\",\n              children: [\"Machine No. \", m.block]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 189,\n              columnNumber: 17\n            }, this), m.id ? /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"subtitle1\",\n                children: [\"Model: \", m.model]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 192,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"subtitle2\",\n                children: [\"Product No.: \", m.productNo]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 193,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                variant: \"contained\",\n                onClick: () => navigate(`/machine/${m.id}`),\n                sx: {\n                  mt: 1\n                },\n                children: \"View Details\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 194,\n                columnNumber: 21\n              }, this), !m.completed && /*#__PURE__*/_jsxDEV(Button, {\n                variant: \"outlined\",\n                color: \"warning\",\n                sx: {\n                  mt: 1\n                },\n                onClick: () => markComplete(m),\n                children: \"Mark as Complete\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 202,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true) : /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"outlined\",\n              color: \"primary\",\n              sx: {\n                mt: 2\n              },\n              onClick: () => handleAddClick(idx),\n              children: \"Add Machine\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 213,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 13\n        }, this)\n      }, idx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n      open: open,\n      onClose: () => setOpen(false),\n      children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n        children: \"Add Machine\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n        children: [/*#__PURE__*/_jsxDEV(TextField, {\n          select: true,\n          label: \"\",\n          value: form.model,\n          onChange: e => setForm({\n            ...form,\n            model: e.target.value\n          }),\n          fullWidth: true,\n          margin: \"normal\",\n          SelectProps: {\n            native: true\n          },\n          autoFocus: true,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"Select Model\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 242,\n            columnNumber: 13\n          }, this), MACHINE_MODELS.map(model => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: model,\n            children: model\n          }, model, false, {\n            fileName: _jsxFileName,\n            lineNumber: 244,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          label: \"Machine No. (7 digits)\",\n          value: form.productNo,\n          onChange: e => setForm({\n            ...form,\n            productNo: e.target.value\n          }),\n          fullWidth: true,\n          margin: \"normal\",\n          inputProps: {\n            maxLength: 7\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          ref: fileInputRef,\n          type: \"file\",\n          accept: \"application/pdf\",\n          style: {\n            display: 'block',\n            marginTop: 16\n          },\n          onChange: e => setPdfFile(e.target.files[0])\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 257,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => setOpen(false),\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleAddMachine,\n          variant: \"contained\",\n          children: \"Add\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Snackbar, {\n      open: snackbar.open,\n      autoHideDuration: 6000,\n      onClose: () => setSnackbar({\n        ...snackbar,\n        open: false\n      }),\n      message: snackbar.message,\n      action: snackbar.action\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(MachineGrid, \"tU42VfJooKYiN26zM4hX6d9QE/s=\", false, function () {\n  return [useNavigate, useQueryClient, useQuery, useMutation, useMutation, useMutation];\n});\n_c = MachineGrid;\nexport default MachineGrid;\nvar _c;\n$RefreshReg$(_c, \"MachineGrid\");","map":{"version":3,"names":["React","useState","useRef","Grid","Card","CardContent","Typography","Button","Dialog","DialogTitle","DialogContent","DialogActions","TextField","Snackbar","useNavigate","useQuery","useMutation","useQueryClient","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","BLOCKS","addMachineApi","formData","data","post","fetchMachines","get","completeMachineApi","id","deleteMachineApi","delete","MachineGrid","_s","navigate","queryClient","pdfFile","setPdfFile","fileInputRef","machines","queryKey","queryFn","staleTime","select","Array","isArray","sort","a","b","blockNo","refetchOnWindowFocus","addMachineMutation","mutationFn","onSuccess","invalidateQueries","completeMachineMutation","deleteMachineMutation","open","setOpen","selectedBlock","setSelectedBlock","MACHINE_MODELS","form","setForm","model","productNo","snackbar","setSnackbar","message","action","blocks","from","length","_","i","machine","find","m","block","handleAddClick","blockIdx","blockMachine","handleAddMachine","test","exists","some","FormData","append","String","mutateAsync","err","_err$response","msg","response","markComplete","color","size","onClick","removeMachine","children","fileName","_jsxFileName","lineNumber","columnNumber","container","spacing","sx","mt","background","minHeight","p","map","idx","item","xs","sm","md","completed","status","textAlign","variant","onClose","label","value","onChange","e","target","fullWidth","margin","SelectProps","native","autoFocus","inputProps","maxLength","ref","type","accept","style","display","marginTop","files","autoHideDuration","_c","$RefreshReg$"],"sources":["D:/Krunal/catalisProject/frontend/src/MachineGrid.jsx"],"sourcesContent":["import React, { useState, useRef } from 'react';\r\nimport { Grid, Card, CardContent, Typography, Button, Dialog, DialogTitle, DialogContent, DialogActions, TextField, Snackbar } from '@mui/material';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\r\nimport axios from 'axios';\r\n\r\nconst BLOCKS = 12;\r\n\r\n// API calls\r\nconst addMachineApi = async (formData) => {\r\n  const { data } = await axios.post('/api/machines', formData);\r\n  return data;\r\n};\r\n\r\nconst fetchMachines = async () => {\r\n  const { data } = await axios.get('/api/machines');\r\n  return data;\r\n};\r\n\r\nconst completeMachineApi = async (id) => {\r\n  const { data } = await axios.post(`/api/machines/${id}/complete`);\r\n  return data;\r\n};\r\n\r\nconst deleteMachineApi = async (id) => {\r\n  await axios.delete(`/api/machines/${id}`);\r\n};\r\n\r\nfunction MachineGrid() {\r\n  const navigate = useNavigate();\r\n  const queryClient = useQueryClient();\r\n  const [pdfFile, setPdfFile] = useState(null);\r\n  const fileInputRef = useRef();\r\n\r\n  // âœ… React Query: fetch machines directly\r\n  const { data: machines = [] } = useQuery({\r\n    queryKey: ['machines'],\r\n    queryFn: fetchMachines,\r\n    staleTime: 5 * 60 * 1000, // keep cached for 5 minutes\r\n    select: (data) =>\r\n      Array.isArray(data)\r\n        ? data.sort((a, b) => (a.blockNo || 0) - (b.blockNo || 0))\r\n        : [],\r\n    refetchOnWindowFocus: false,\r\n  });\r\n\r\n  // Mutations\r\n  const addMachineMutation = useMutation({\r\n    mutationFn: addMachineApi,\r\n    onSuccess: () => {\r\n      queryClient.invalidateQueries({ queryKey: ['machines'] });\r\n    },\r\n  });\r\n\r\n  const completeMachineMutation = useMutation({\r\n    mutationFn: completeMachineApi,\r\n    onSuccess: () => queryClient.invalidateQueries({ queryKey: ['machines'] }),\r\n  });\r\n\r\n  const deleteMachineMutation = useMutation({\r\n    mutationFn: deleteMachineApi,\r\n    onSuccess: () => queryClient.invalidateQueries({ queryKey: ['machines'] }),\r\n  });\r\n\r\n  // UI state\r\n  const [open, setOpen] = useState(false);\r\n  const [selectedBlock, setSelectedBlock] = useState(null);\r\n  const MACHINE_MODELS = [\r\n    'CPT425-SERRA',\r\n    'CPT525-SERRA',\r\n    'CPT625-SERRA',\r\n    'CPT650-SERRA',\r\n    'CPT825-SERRA',\r\n  ];\r\n  const [form, setForm] = useState({ model: '', productNo: '' });\r\n  const [snackbar, setSnackbar] = useState({ open: false, message: '', action: null });\r\n\r\n  // Always 12 blocks, fill with machines or empty\r\n  const blocks = Array.from({ length: BLOCKS }, (_, i) => {\r\n    const machine = machines.find((m) => m.blockNo === i + 1);\r\n    return machine ? { ...machine, block: i + 1 } : { block: i + 1 };\r\n  });\r\n\r\n  // Handlers\r\n  const handleAddClick = (blockIdx) => {\r\n    const blockMachine = machines.find((m) => m.blockNo === blockIdx + 1);\r\n    if (blockMachine) {\r\n      setSnackbar({\r\n        open: true,\r\n        message: 'This block already has a machine. Please select an empty block.',\r\n        action: null,\r\n      });\r\n      return;\r\n    }\r\n    setSelectedBlock(blockIdx);\r\n    setForm({ model: '', productNo: '' });\r\n    setOpen(true);\r\n    setPdfFile(null);\r\n  };\r\n\r\n  const handleAddMachine = async () => {\r\n    if (!form.model || !/^\\d{7}$/.test(form.productNo)) {\r\n      setSnackbar({ open: true, message: 'Enter model and unique 7-digit machine no.', action: null });\r\n      return;\r\n    }\r\n    if (!pdfFile) {\r\n      setSnackbar({ open: true, message: 'Please upload a master order PDF.', action: null });\r\n      return;\r\n    }\r\n    const exists = machines.some((m) => m.productNo === form.productNo);\r\n    if (exists) {\r\n      setSnackbar({ open: true, message: 'Machine no. must be unique!', action: null });\r\n      return;\r\n    }\r\n\r\n    const formData = new FormData();\r\n    formData.append('name', `M/C-${selectedBlock + 1}`);\r\n    formData.append('status', 'INCOMPLETE');\r\n    formData.append('completed', false);\r\n    formData.append('masterCardInfo', '');\r\n    formData.append('electricDrawingPath', '');\r\n    formData.append('machineNo', String(selectedBlock + 1));\r\n    formData.append('model', form.model);\r\n    formData.append('productNo', form.productNo);\r\n    formData.append('blockNo', selectedBlock + 1);\r\n    formData.append('pdf', pdfFile);\r\n\r\n    try {\r\n      await addMachineMutation.mutateAsync(formData);\r\n      setOpen(false);\r\n      setSelectedBlock(null);\r\n      setPdfFile(null);\r\n    } catch (err) {\r\n      let msg = 'Upload failed';\r\n      if (err?.response?.data) {\r\n        if (typeof err.response.data === 'string') {\r\n          msg = err.response.data;\r\n        } else if (typeof err.response.data === 'object' && err.response.data.message) {\r\n          msg = err.response.data.message;\r\n        }\r\n      }\r\n      setSnackbar({\r\n        open: true,\r\n        message: msg,\r\n        action: null,\r\n      });\r\n    }\r\n  };\r\n\r\n  const markComplete = async (machine) => {\r\n    await completeMachineMutation.mutateAsync(machine.id);\r\n    setSnackbar({\r\n      open: true,\r\n      message: 'Would you like to remove this machine from shopfloor?',\r\n      action: (\r\n        <Button color=\"inherit\" size=\"small\" onClick={() => removeMachine(machine.id)}>\r\n          Yes, Remove\r\n        </Button>\r\n      ),\r\n    });\r\n  };\r\n\r\n  const removeMachine = async (id) => {\r\n    await deleteMachineMutation.mutateAsync(id);\r\n    setSnackbar({\r\n      open: true,\r\n      message: 'Machine removed from shopfloor and added to completed table.',\r\n      action: null,\r\n    });\r\n  };\r\n\r\n  // UI\r\n  return (\r\n    <>\r\n      <Grid container spacing={2} sx={{ mt: 2, background: '#fff', minHeight: '80vh', p: 2 }}>\r\n        {blocks.map((m, idx) => (\r\n          <Grid item xs={6} sm={4} md={3} key={idx}>\r\n            <Card\r\n              sx={{\r\n                background: m.completed\r\n                  ? '#c8e6c9'\r\n                  : m.status === 'INCOMPLETE'\r\n                  ? '#ffcdd2'\r\n                  : '#fff',\r\n                minHeight: 120,\r\n              }}\r\n            >\r\n              <CardContent sx={{ textAlign: 'center' }}>\r\n                <Typography variant=\"h6\">Machine No. {m.block}</Typography>\r\n                {m.id ? (\r\n                  <>\r\n                    <Typography variant=\"subtitle1\">Model: {m.model}</Typography>\r\n                    <Typography variant=\"subtitle2\">Product No.: {m.productNo}</Typography>\r\n                    <Button\r\n                      variant=\"contained\"\r\n                      onClick={() => navigate(`/machine/${m.id}`)}\r\n                      sx={{ mt: 1 }}\r\n                    >\r\n                      View Details\r\n                    </Button>\r\n                    {!m.completed && (\r\n                      <Button\r\n                        variant=\"outlined\"\r\n                        color=\"warning\"\r\n                        sx={{ mt: 1 }}\r\n                        onClick={() => markComplete(m)}\r\n                      >\r\n                        Mark as Complete\r\n                      </Button>\r\n                    )}\r\n                  </>\r\n                ) : (\r\n                  <Button\r\n                    variant=\"outlined\"\r\n                    color=\"primary\"\r\n                    sx={{ mt: 2 }}\r\n                    onClick={() => handleAddClick(idx)}\r\n                  >\r\n                    Add Machine\r\n                  </Button>\r\n                )}\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n        ))}\r\n      </Grid>\r\n\r\n      {/* Add Machine Dialog */}\r\n      <Dialog open={open} onClose={() => setOpen(false)}>\r\n        <DialogTitle>Add Machine</DialogTitle>\r\n        <DialogContent>\r\n          <TextField\r\n            select\r\n            label=\"\"\r\n            value={form.model}\r\n            onChange={(e) => setForm({ ...form, model: e.target.value })}\r\n            fullWidth\r\n            margin=\"normal\"\r\n            SelectProps={{ native: true }}\r\n            autoFocus\r\n          >\r\n            <option value=\"\">Select Model</option>\r\n            {MACHINE_MODELS.map((model) => (\r\n              <option key={model} value={model}>\r\n                {model}\r\n              </option>\r\n            ))}\r\n          </TextField>\r\n          <TextField\r\n            label=\"Machine No. (7 digits)\"\r\n            value={form.productNo}\r\n            onChange={(e) => setForm({ ...form, productNo: e.target.value })}\r\n            fullWidth\r\n            margin=\"normal\"\r\n            inputProps={{ maxLength: 7 }}\r\n          />\r\n          <input\r\n            ref={fileInputRef}\r\n            type=\"file\"\r\n            accept=\"application/pdf\"\r\n            style={{ display: 'block', marginTop: 16 }}\r\n            onChange={(e) => setPdfFile(e.target.files[0])}\r\n          />\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => setOpen(false)}>Cancel</Button>\r\n          <Button onClick={handleAddMachine} variant=\"contained\">\r\n            Add\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n      {/* Snackbar */}\r\n      <Snackbar\r\n        open={snackbar.open}\r\n        autoHideDuration={6000}\r\n        onClose={() => setSnackbar({ ...snackbar, open: false })}\r\n        message={snackbar.message}\r\n        action={snackbar.action}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default MachineGrid;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}